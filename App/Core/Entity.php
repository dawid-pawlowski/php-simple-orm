<?php declare(strict_types = 1);

use ReflectionClass;
use ReflectionProperty;
use App\Database\Database;

abstract class Entity {

    protected Database $database;
    protected int $id = 0;

    public function __construct(Database $database) {
        $this->database = $database;
    }

    public function save() {
        $class = new ReflectionClass($this);
        $table = strtolower($class->getShortName());

        $properties = [];

        foreach ($class->getProperties(ReflectionProperty::IS_PUBLIC) as $property) {
            $propertyName = $property->getName();
            $properties[$propertyName] = $this->{$propertyName};
        }

        if ($this->id != 0) {
            // create set string - append " = ?" to each element
            $set = implode(', ', array_map(fn($e) => $e . ' = ?', array_keys($properties)));
            $this->database->run("UPDATE {$table} SET {$set} WHERE {$table}.id = {$this->id}", array_values($properties));
        } else {
            // remove "id" property from columns - will be auto-generated by db
            // create columns string
            $columns = implode(', ', array_keys($properties));
            // create "?" placeholders for properties (-1 for removed "id" field)
            $values = implode(', ', array_fill(0, count($properties), '?'));
            $this->database->run("INSERT INTO {$table} ({$columns}) VALUES ({$values})", array_values($properties));
            // set entity id
            $this->id = $this->database->lastInsertId();
        }

    }

    protected static function map(array $object): static {
        $class = new ReflectionClass(get_called_class());
        $entity = $class=>newInstance();

        foreach ($class->getProperties() as $property) {
            if (isset($object[$property->getName()])) {
                $property->setValue($entity, $object[$property->getName()]);
            }
        }

        $entity->initialize();

        return $entity;
    }

    public function find(String $id): Object {

    }

    public function findAll(): array {}
}
